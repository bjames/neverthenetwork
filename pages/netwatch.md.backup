title: Practical Automation - Netwatch
published: 2019-09-12
category:
- Automation
- Programming
author: Brandon James
summary: One of the more practical ways to get started with automation is by writing small data gathering utilities. In this article I give a brief introduction to my Netwatch script. 


One practical way to get started with automation is by writing small data gathering utilities. They provide immediate value and have no risk of failure. In this short article we are going to explore automating an issue I've faced in the past. You're working a TAC case and they want you to run a command on _n_ devices once every _x_ minutes over the course of _y_ hours. 

This project was inspired by a [post on Reddit](https://www.reddit.com/r/Cisco/comments/d2ndqq/dump_switch_commands_to_a_file_on_a_schedule/). If you just want the code, you can clone my repo on [github](https://github.com/bjames/netwatch).

## Problem Meet Solution

It's important to have a clear definition of the problem you are solving. The problem here relatively simple, we need to periodically run a set of commands against multiple network devices. A task that is annoying at best, but lends itself well to automation. 

I came up with the following goals for this script: 

1. The commands should execute on each device simultaneously to get a full picture of the network at a single moment in time.
	* I use the multiprocessing Pool.map() function to easily add concurrency to my scripts. This is a process I've detailed [here](https://neverthenetwork.com/notes/automation_concurrency/).
2. The script should be reusable without any modifications to the script itself.
	* I use YAML configuration files for all my scripts. You can read about how I handle script configuration [here](https://neverthenetwork.com/notes/automation_config/).
3. The output should include accurate timestamps so we can correlate events across multiple devices.
	* This was achived using the datetime.now() function
4. Output should be written to a file each time the main loop executes, that way if the script stops we don't lose the data up to that point.
5. The script should be able to complete it's task without any changes to the system it's running on.
